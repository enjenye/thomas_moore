-- File: proc.vhd
-- Generated by MyHDL 0.9.0
-- Date: Sun Mar 11 21:46:02 2018


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_090.all;

entity proc is
    port (
        LED: out unsigned(11 downto 0);
        SW: in unsigned(11 downto 0);
        CLK100MHZ: in std_logic
    );
end entity proc;
-- shallow stack processor

architecture MyHDL of proc is





signal A: signed (11 downto 0);
signal md: signed (11 downto 0);
signal C: signed (11 downto 0);
signal B: signed (11 downto 0);
signal I: signed (11 downto 0);
signal skip: unsigned(2 downto 0);
signal rd: std_logic;
signal ext: std_logic;
signal inst: unsigned(8 downto 0);
signal wr: std_logic;
signal dinp: signed (11 downto 0);
signal ma: signed (11 downto 0);
type t_array_mem is array(0 to 4096-1) of unsigned(11 downto 0);
signal mem: t_array_mem;

begin





PROC_MEM_WR: process (CLK100MHZ) is
begin
    if rising_edge(CLK100MHZ) then
        if bool(wr) then
            if (ma = (-1)) then
                LED <= unsigned(md);
            else
                mem(to_integer(ma)) <= unsigned(md);
            end if;
        end if;
    end if;
end process PROC_MEM_WR;


PROC_MEM_RD: process (A, mem, SW) is
begin
    if (A = (-1)) then
        dinp <= signed(SW);
    else
        dinp <= signed(mem(to_integer(A)));
    end if;
end process PROC_MEM_RD;


PROC_ROM_RD: process (I) is
begin
    case to_integer(I) is
        when 0 => inst <= "000010001";
        when 1 => inst <= "000000101";
        when 2 => inst <= "000010000";
        when 3 => inst <= "000001011";
        when 4 => inst <= "000010110";
        when 5 => inst <= "000011011";
        when 6 => inst <= "000001100";
        when 7 => inst <= "000000100";
        when 8 => inst <= "000010000";
        when 9 => inst <= "000001010";
        when 10 => inst <= "000011111";
        when 11 => inst <= "000001011";
        when 12 => inst <= "000010101";
        when 13 => inst <= "000010001";
        when 14 => inst <= "000001100";
        when 15 => inst <= "000000100";
        when 16 => inst <= "000011111";
        when 17 => inst <= "000011111";
        when 18 => inst <= "000010001";
        when 19 => inst <= "000001101";
        when 20 => inst <= "000001111";
        when 21 => inst <= "000000000";
        when 22 => inst <= "000000000";
        when 23 => inst <= "000000000";
        when 24 => inst <= "000000000";
        when 25 => inst <= "000000000";
        when 26 => inst <= "000000000";
        when 27 => inst <= "000000000";
        when 28 => inst <= "000000000";
        when 29 => inst <= "000000000";
        when 30 => inst <= "000000000";
        when 31 => inst <= "000000000";
        when 32 => inst <= "000000000";
        when 33 => inst <= "000000000";
        when 34 => inst <= "000000000";
        when 35 => inst <= "000000000";
        when 36 => inst <= "000000000";
        when 37 => inst <= "000000000";
        when 38 => inst <= "000000000";
        when 39 => inst <= "000000000";
        when 40 => inst <= "000000000";
        when 41 => inst <= "000000000";
        when 42 => inst <= "000000000";
        when 43 => inst <= "000000000";
        when 44 => inst <= "000000000";
        when 45 => inst <= "000000000";
        when 46 => inst <= "000000000";
        when 47 => inst <= "000000000";
        when 48 => inst <= "000000000";
        when 49 => inst <= "000000000";
        when 50 => inst <= "000000000";
        when 51 => inst <= "000000000";
        when 52 => inst <= "000000000";
        when 53 => inst <= "000000000";
        when 54 => inst <= "000000000";
        when 55 => inst <= "000000000";
        when 56 => inst <= "000000000";
        when 57 => inst <= "000000000";
        when 58 => inst <= "000000000";
        when 59 => inst <= "000000000";
        when 60 => inst <= "000000000";
        when 61 => inst <= "000000000";
        when 62 => inst <= "000000000";
        when 63 => inst <= "000000000";
        when 64 => inst <= "000010010";
        when 65 => inst <= "000001011";
        when 66 => inst <= "000010000";
        when 67 => inst <= "000000101";
        when 68 => inst <= "000010001";
        when 69 => inst <= "000001001";
        when 70 => inst <= "000000101";
        when 71 => inst <= "000010100";
        when 72 => inst <= "000001110";
        when 73 => inst <= "000011111";
        when 74 => inst <= "000011111";
        when 75 => inst <= "000011000";
        when 76 => inst <= "000001101";
        when 77 => inst <= "000000100";
        when 78 => inst <= "000010010";
        when 79 => inst <= "000001010";
        when 80 => inst <= "000001100";
        when 81 => inst <= "000010011";
        when 82 => inst <= "000001011";
        when 83 => inst <= "000011111";
        when 84 => inst <= "000001010";
        when 85 => inst <= "000010001";
        when 86 => inst <= "000001011";
        when 87 => inst <= "000010100";
        when 88 => inst <= "000010000";
        when 89 => inst <= "000001100";
        when 90 => inst <= "000000100";
        when 91 => inst <= "000010001";
        when 92 => inst <= "000001010";
        when 93 => inst <= "000010001";
        when 94 => inst <= "000001001";
        when 95 => inst <= "000000101";
        when 96 => inst <= "000010001";
        when 97 => inst <= "000001011";
        when 98 => inst <= "000010100";
        when 99 => inst <= "000001110";
        when 100 => inst <= "000011111";
        when 101 => inst <= "000011111";
        when 102 => inst <= "000010000";
        when 103 => inst <= "000001101";
        when 104 => inst <= "000010011";
        when 105 => inst <= "000001010";
        when 106 => inst <= "000001100";
        when 107 => inst <= "000010100";
        when 108 => inst <= "000001011";
        when 109 => inst <= "000010000";
        when 110 => inst <= "000001010";
        when 111 => inst <= "000000010";
        when 112 => inst <= "000000101";
        when 113 => inst <= "000011000";
        when 114 => inst <= "000010000";
        when 115 => inst <= "000010000";
        when 116 => inst <= "000001000";
        when 117 => inst <= "000010010";
        when 118 => inst <= "000001110";
        when 119 => inst <= "000010001";
        when 120 => inst <= "000000101";
        when 121 => inst <= "000010000";
        when 122 => inst <= "000001011";
        when 123 => inst <= "000010100";
        when 124 => inst <= "000001010";
        when 125 => inst <= "000001100";
        when 126 => inst <= "000010101";
        when 127 => inst <= "000001011";
        when 128 => inst <= "000010000";
        when 129 => inst <= "000001010";
        when 130 => inst <= "000010001";
        when 131 => inst <= "000001001";
        when 132 => inst <= "000010000";
        when 133 => inst <= "000001011";
        when 134 => inst <= "000010101";
        when 135 => inst <= "000001010";
        when 136 => inst <= "000001100";
        when 137 => inst <= "000000000";
        when 138 => inst <= "000000000";
        when 139 => inst <= "000000000";
        when 140 => inst <= "000000000";
        when 141 => inst <= "000000000";
        when 142 => inst <= "000000000";
        when 143 => inst <= "000000000";
        when 144 => inst <= "000000000";
        when 145 => inst <= "000000000";
        when 146 => inst <= "000000000";
        when 147 => inst <= "000000000";
        when 148 => inst <= "000000000";
        when 149 => inst <= "000000000";
        when 150 => inst <= "000000000";
        when 151 => inst <= "000000000";
        when 152 => inst <= "000000000";
        when 153 => inst <= "000000000";
        when 154 => inst <= "000000000";
        when 155 => inst <= "000000000";
        when 156 => inst <= "000000000";
        when 157 => inst <= "000000000";
        when 158 => inst <= "000000000";
        when 159 => inst <= "000000000";
        when 160 => inst <= "000000000";
        when 161 => inst <= "000000000";
        when 162 => inst <= "000000000";
        when 163 => inst <= "000000000";
        when 164 => inst <= "000000000";
        when 165 => inst <= "000000000";
        when 166 => inst <= "000000000";
        when 167 => inst <= "000000000";
        when 168 => inst <= "000000000";
        when 169 => inst <= "000000000";
        when 170 => inst <= "000000000";
        when 171 => inst <= "000000000";
        when 172 => inst <= "000000000";
        when 173 => inst <= "000000000";
        when 174 => inst <= "000000000";
        when 175 => inst <= "000000000";
        when 176 => inst <= "000000000";
        when 177 => inst <= "000000000";
        when 178 => inst <= "000000000";
        when 179 => inst <= "000000000";
        when 180 => inst <= "000000000";
        when 181 => inst <= "000000000";
        when 182 => inst <= "000000000";
        when 183 => inst <= "000000000";
        when 184 => inst <= "000000000";
        when 185 => inst <= "000000000";
        when 186 => inst <= "000000000";
        when 187 => inst <= "000000000";
        when 188 => inst <= "000000000";
        when 189 => inst <= "000000000";
        when 190 => inst <= "000000000";
        when 191 => inst <= "000000000";
        when 192 => inst <= "000000000";
        when 193 => inst <= "000000000";
        when 194 => inst <= "000000000";
        when 195 => inst <= "000000000";
        when 196 => inst <= "000000000";
        when 197 => inst <= "000000000";
        when 198 => inst <= "000000000";
        when 199 => inst <= "000000000";
        when 200 => inst <= "000000000";
        when 201 => inst <= "000000000";
        when 202 => inst <= "000000000";
        when 203 => inst <= "000000000";
        when 204 => inst <= "000000000";
        when 205 => inst <= "000000000";
        when 206 => inst <= "000000000";
        when 207 => inst <= "000000000";
        when 208 => inst <= "000000000";
        when 209 => inst <= "000000000";
        when 210 => inst <= "000000000";
        when 211 => inst <= "000000000";
        when 212 => inst <= "000000000";
        when 213 => inst <= "000000000";
        when 214 => inst <= "000000000";
        when 215 => inst <= "000000000";
        when 216 => inst <= "000000000";
        when 217 => inst <= "000000000";
        when 218 => inst <= "000000000";
        when 219 => inst <= "000000000";
        when 220 => inst <= "000000000";
        when 221 => inst <= "000000000";
        when 222 => inst <= "000000000";
        when 223 => inst <= "000000000";
        when 224 => inst <= "000000000";
        when 225 => inst <= "000000000";
        when 226 => inst <= "000000000";
        when 227 => inst <= "000000000";
        when 228 => inst <= "000000000";
        when 229 => inst <= "000000000";
        when 230 => inst <= "000000000";
        when 231 => inst <= "000000000";
        when 232 => inst <= "000000000";
        when 233 => inst <= "000000000";
        when 234 => inst <= "000000000";
        when 235 => inst <= "000000000";
        when 236 => inst <= "000000000";
        when 237 => inst <= "000000000";
        when 238 => inst <= "000000000";
        when 239 => inst <= "000000000";
        when 240 => inst <= "000000000";
        when 241 => inst <= "000000000";
        when 242 => inst <= "000000000";
        when 243 => inst <= "000000000";
        when 244 => inst <= "000000000";
        when 245 => inst <= "000000000";
        when 246 => inst <= "000000000";
        when 247 => inst <= "000000000";
        when 248 => inst <= "000000000";
        when 249 => inst <= "000000000";
        when 250 => inst <= "000000000";
        when 251 => inst <= "000000000";
        when 252 => inst <= "000000000";
        when 253 => inst <= "000000000";
        when 254 => inst <= "000000000";
        when 255 => inst <= "000000000";
        when 256 => inst <= "000000000";
        when 257 => inst <= "000000000";
        when 258 => inst <= "000000000";
        when 259 => inst <= "000000000";
        when 260 => inst <= "000000000";
        when 261 => inst <= "000000000";
        when 262 => inst <= "000000000";
        when 263 => inst <= "000000000";
        when 264 => inst <= "000000000";
        when 265 => inst <= "000000000";
        when 266 => inst <= "000000000";
        when 267 => inst <= "000000000";
        when 268 => inst <= "000000000";
        when 269 => inst <= "000000000";
        when 270 => inst <= "000000000";
        when 271 => inst <= "000000000";
        when 272 => inst <= "000000000";
        when 273 => inst <= "000000000";
        when 274 => inst <= "000000000";
        when 275 => inst <= "000000000";
        when 276 => inst <= "000000000";
        when 277 => inst <= "000000000";
        when 278 => inst <= "000000000";
        when 279 => inst <= "000000000";
        when 280 => inst <= "000000000";
        when 281 => inst <= "000000000";
        when 282 => inst <= "000000000";
        when 283 => inst <= "000000000";
        when 284 => inst <= "000000000";
        when 285 => inst <= "000000000";
        when 286 => inst <= "000000000";
        when 287 => inst <= "000000000";
        when 288 => inst <= "000000000";
        when 289 => inst <= "000000000";
        when 290 => inst <= "000000000";
        when 291 => inst <= "000000000";
        when 292 => inst <= "000000000";
        when 293 => inst <= "000000000";
        when 294 => inst <= "000000000";
        when 295 => inst <= "000000000";
        when 296 => inst <= "000000000";
        when 297 => inst <= "000000000";
        when 298 => inst <= "000000000";
        when 299 => inst <= "000000000";
        when 300 => inst <= "000000000";
        when 301 => inst <= "000000000";
        when 302 => inst <= "000000000";
        when 303 => inst <= "000000000";
        when 304 => inst <= "000000000";
        when 305 => inst <= "000000000";
        when 306 => inst <= "000000000";
        when 307 => inst <= "000000000";
        when 308 => inst <= "000000000";
        when 309 => inst <= "000000000";
        when 310 => inst <= "000000000";
        when 311 => inst <= "000000000";
        when 312 => inst <= "000000000";
        when 313 => inst <= "000000000";
        when 314 => inst <= "000000000";
        when 315 => inst <= "000000000";
        when 316 => inst <= "000000000";
        when 317 => inst <= "000000000";
        when 318 => inst <= "000000000";
        when 319 => inst <= "000000000";
        when 320 => inst <= "000000000";
        when 321 => inst <= "000000000";
        when 322 => inst <= "000000000";
        when 323 => inst <= "000000000";
        when 324 => inst <= "000000000";
        when 325 => inst <= "000000000";
        when 326 => inst <= "000000000";
        when 327 => inst <= "000000000";
        when 328 => inst <= "000000000";
        when 329 => inst <= "000000000";
        when 330 => inst <= "000000000";
        when 331 => inst <= "000000000";
        when 332 => inst <= "000000000";
        when 333 => inst <= "000000000";
        when 334 => inst <= "000000000";
        when 335 => inst <= "000000000";
        when 336 => inst <= "000000000";
        when 337 => inst <= "000000000";
        when 338 => inst <= "000000000";
        when 339 => inst <= "000000000";
        when 340 => inst <= "000000000";
        when 341 => inst <= "000000000";
        when 342 => inst <= "000000000";
        when 343 => inst <= "000000000";
        when 344 => inst <= "000000000";
        when 345 => inst <= "000000000";
        when 346 => inst <= "000000000";
        when 347 => inst <= "000000000";
        when 348 => inst <= "000000000";
        when 349 => inst <= "000000000";
        when 350 => inst <= "000000000";
        when 351 => inst <= "000000000";
        when 352 => inst <= "000000000";
        when 353 => inst <= "000000000";
        when 354 => inst <= "000000000";
        when 355 => inst <= "000000000";
        when 356 => inst <= "000000000";
        when 357 => inst <= "000000000";
        when 358 => inst <= "000000000";
        when 359 => inst <= "000000000";
        when 360 => inst <= "000000000";
        when 361 => inst <= "000000000";
        when 362 => inst <= "000000000";
        when 363 => inst <= "000000000";
        when 364 => inst <= "000000000";
        when 365 => inst <= "000000000";
        when 366 => inst <= "000000000";
        when 367 => inst <= "000000000";
        when 368 => inst <= "000000000";
        when 369 => inst <= "000000000";
        when 370 => inst <= "000000000";
        when 371 => inst <= "000000000";
        when 372 => inst <= "000000000";
        when 373 => inst <= "000000000";
        when 374 => inst <= "000000000";
        when 375 => inst <= "000000000";
        when 376 => inst <= "000000000";
        when 377 => inst <= "000000000";
        when 378 => inst <= "000000000";
        when 379 => inst <= "000000000";
        when 380 => inst <= "000000000";
        when 381 => inst <= "000000000";
        when 382 => inst <= "000000000";
        when 383 => inst <= "000000000";
        when 384 => inst <= "000000000";
        when 385 => inst <= "000000000";
        when 386 => inst <= "000000000";
        when 387 => inst <= "000000000";
        when 388 => inst <= "000000000";
        when 389 => inst <= "000000000";
        when 390 => inst <= "000000000";
        when 391 => inst <= "000000000";
        when 392 => inst <= "000000000";
        when 393 => inst <= "000000000";
        when 394 => inst <= "000000000";
        when 395 => inst <= "000000000";
        when 396 => inst <= "000000000";
        when 397 => inst <= "000000000";
        when 398 => inst <= "000000000";
        when 399 => inst <= "000000000";
        when 400 => inst <= "000000000";
        when 401 => inst <= "000000000";
        when 402 => inst <= "000000000";
        when 403 => inst <= "000000000";
        when 404 => inst <= "000000000";
        when 405 => inst <= "000000000";
        when 406 => inst <= "000000000";
        when 407 => inst <= "000000000";
        when 408 => inst <= "000000000";
        when 409 => inst <= "000000000";
        when 410 => inst <= "000000000";
        when 411 => inst <= "000000000";
        when 412 => inst <= "000000000";
        when 413 => inst <= "000000000";
        when 414 => inst <= "000000000";
        when 415 => inst <= "000000000";
        when 416 => inst <= "000000000";
        when 417 => inst <= "000000000";
        when 418 => inst <= "000000000";
        when 419 => inst <= "000000000";
        when 420 => inst <= "000000000";
        when 421 => inst <= "000000000";
        when 422 => inst <= "000000000";
        when 423 => inst <= "000000000";
        when 424 => inst <= "000000000";
        when 425 => inst <= "000000000";
        when 426 => inst <= "000000000";
        when 427 => inst <= "000000000";
        when 428 => inst <= "000000000";
        when 429 => inst <= "000000000";
        when 430 => inst <= "000000000";
        when 431 => inst <= "000000000";
        when 432 => inst <= "000000000";
        when 433 => inst <= "000000000";
        when 434 => inst <= "000000000";
        when 435 => inst <= "000000000";
        when 436 => inst <= "000000000";
        when 437 => inst <= "000000000";
        when 438 => inst <= "000000000";
        when 439 => inst <= "000000000";
        when 440 => inst <= "000000000";
        when 441 => inst <= "000000000";
        when 442 => inst <= "000000000";
        when 443 => inst <= "000000000";
        when 444 => inst <= "000000000";
        when 445 => inst <= "000000000";
        when 446 => inst <= "000000000";
        when 447 => inst <= "000000000";
        when 448 => inst <= "000000000";
        when 449 => inst <= "000000000";
        when 450 => inst <= "000000000";
        when 451 => inst <= "000000000";
        when 452 => inst <= "000000000";
        when 453 => inst <= "000000000";
        when 454 => inst <= "000000000";
        when 455 => inst <= "000000000";
        when 456 => inst <= "000000000";
        when 457 => inst <= "000000000";
        when 458 => inst <= "000000000";
        when 459 => inst <= "000000000";
        when 460 => inst <= "000000000";
        when 461 => inst <= "000000000";
        when 462 => inst <= "000000000";
        when 463 => inst <= "000000000";
        when 464 => inst <= "000000000";
        when 465 => inst <= "000000000";
        when 466 => inst <= "000000000";
        when 467 => inst <= "000000000";
        when 468 => inst <= "000000000";
        when 469 => inst <= "000000000";
        when 470 => inst <= "000000000";
        when 471 => inst <= "000000000";
        when 472 => inst <= "000000000";
        when 473 => inst <= "000000000";
        when 474 => inst <= "000000000";
        when 475 => inst <= "000000000";
        when 476 => inst <= "000000000";
        when 477 => inst <= "000000000";
        when 478 => inst <= "000000000";
        when 479 => inst <= "000000000";
        when 480 => inst <= "000000000";
        when 481 => inst <= "000000000";
        when 482 => inst <= "000000000";
        when 483 => inst <= "000000000";
        when 484 => inst <= "000000000";
        when 485 => inst <= "000000000";
        when 486 => inst <= "000000000";
        when 487 => inst <= "000000000";
        when 488 => inst <= "000000000";
        when 489 => inst <= "000000000";
        when 490 => inst <= "000000000";
        when 491 => inst <= "000000000";
        when 492 => inst <= "000000000";
        when 493 => inst <= "000000000";
        when 494 => inst <= "000000000";
        when 495 => inst <= "000000000";
        when 496 => inst <= "000000000";
        when 497 => inst <= "000000000";
        when 498 => inst <= "000000000";
        when 499 => inst <= "000000000";
        when 500 => inst <= "000000000";
        when 501 => inst <= "000000000";
        when 502 => inst <= "000000000";
        when 503 => inst <= "000000000";
        when 504 => inst <= "000000000";
        when 505 => inst <= "000000000";
        when 506 => inst <= "000000000";
        when 507 => inst <= "000000000";
        when 508 => inst <= "000000000";
        when 509 => inst <= "000000000";
        when 510 => inst <= "000000000";
        when others => inst <= "000000000";
    end case;
end process PROC_ROM_RD;


PROC_LOGIC: process (CLK100MHZ) is
    variable oper: unsigned(3 downto 0);
    variable jmp: signed(11 downto 0);
    variable stck: unsigned(1 downto 0);
    variable cnst: unsigned(0 downto 0);
    variable halt: std_logic;
begin
    if rising_edge(CLK100MHZ) then
        ext <= '0';
        rd <= '0';
        wr <= '0';
        jmp := (I + 1);
        halt := '0';
        cnst := inst(5-1 downto 4);
        oper := inst(4-1 downto 0);
        if (skip > 0) then
            skip <= (skip - 1);
            I <= (I + 1);
        elsif bool(cnst) then
            ext <= '1';
            if bool(ext) then
                A <= (shift_left(A, 4) or signed(resize(oper, 12)));
            else
                A <= resize(signed(oper), 12);
                B <= A;
                C <= B;
                stck := to_unsigned(1, 2);
            end if;
        else
            if (oper = 0) then
                A <= (not A);
            else
                case oper is
                    when "0001" =>
                        A <= (-A);
                    when "0010" =>
                        A <= shift_left(A, 1);
                    when "0011" =>
                        A <= shift_right(A, 1);
                    when "0100" =>
                        A <= B;
                        B <= C;
                    when "0101" =>
                        B <= A;
                        C <= B;
                    when "0110" =>
                        A <= C;
                        B <= A;
                        C <= B;
                    when "0111" =>
                        A <= (A xor B);
                        B <= C;
                    when "1000" =>
                        A <= (A and B);
                        B <= C;
                    when "1001" =>
                        A <= (A + B);
                        B <= C;
                    when others =>
                        if (oper = 10) then
                            A <= signed(unsigned(dinp));
                            rd <= '1';
                        else
                            if (oper = 11) then
                                ma <= A;
                                md <= B;
                                wr <= '1';
                                A <= C;
                                B <= C;
                            else
                                case oper is
                                    when "1100" =>
                                        jmp := A;
                                        A <= (I + 1);
                                    when "1101" =>
                                        jmp := (I + A);
                                        A <= B;
                                        B <= C;
                                    when others =>
                                        if (oper = 14) then
                                            if (B = 0) then
                                                skip <= unsigned(A(3-1 downto 0));
                                            end if;
                                            A <= C;
                                            B <= C;
                                        elsif (oper = 15) then
                                            
                                        end if;
                                end case;
                            end if;
                        end if;
                end case;
            end if;
        end if;
        I <= jmp;
        
    end if;
end process PROC_LOGIC;

end architecture MyHDL;
